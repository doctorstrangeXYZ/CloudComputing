Lokasi Download Materi Training:
	https://github.com/doctorstrangeXYZ

01. Open Project
	- https://console.cloud.google.com/
	
02. Startup VM
	Search : VM Instance 
	
03. Edit package.json

	$ cd helloworld
	$ nano package.json
	
		{
		  "name": "helloworld",
		  "version": "1.0.0",
		  "description": "",
		  "main": "index.js",
		  "scripts": {
			"test": "echo \"Error: no test specified\" && exit 1"
		  },
		  "author": "Hari Budisantoso",
		  "license": "ISC",
		  "scripts": {
			"start": "node index.js"
		  },		  
		  "dependencies": {
			"express": "^4.18.2"
		  }
		}	
		
04. Run Hello World Node.js Web Server

	$ cd helloworld
	$ npm install
	$ sudo PORT=80 npm start

05. Test

	Cara 1:
	 - Buka terminal 2
	 
	 $ curl localhost
			Hello, world!
			
	Cara 2:
	 - Buka Web Browser
	 - http://<EXTERNAL IP>

=== Deploy Aplikasi "picard greeting" ke VM Instance ===

01. Upload picard-greeting.zip ke VM Instance

02. Extract picard-greeting.zip

	$ ls
	$ sudo apt-get install -y unzip
	$ unzip picard-greeting.zip

03. Edit picard-greeting/bin/www

	$ cd picard-greeting/bin
	$ nano www
	
		var port = normalizePort(process.env.PORT || '8080');
		
04. Run Hello World Node.js Web Server

	$ cd picard-greeting
	$ npm install
	$ npm start

05. Test
	
	Cara 1:
	 - Buka terminal 2
	 
	 $ curl localhost:8080	==> SUCCESS
			
	Cara 2:
	 - Buka Web Browser
	 - http://<EXTERNAL IP>:8080	==> GAGAL
	 
06. Edit Firewall
	Search : Firewall (VPC Network)

	Create Firewall Rule
	
	Name : http-server-8080
	Target : all instance in the network
	Source IP Range : 0.0.0.0/0
	Specified protocol and ports : tcp 8080
	
05. Test

	 - Buka Web Browser
	 - http://<EXTERNAL IP>:8080	==> SUCCESS
	
=== Install Go + Create Project ===

01. Download the files

	$ sudo apt-get install wget
	$ wget https://dl.google.com/go/go1.16.2.linux-amd64.tar.gz

02. Extract 

	$ sudo tar -C /usr/local -xzf go1.16.2.linux-amd64.tar.gz

03. Add the PATH

	$ export PATH=$PATH:/usr/local/go/bin
	
04. Check version go

	$ go version
		go version go1.16.2 linux/amd64
		
05. Buat simple/main.go

	$ mkdir simple
	$ cd simple
	$ nano main.go

		package main

		import (
				"fmt"
				"net/http"
		)

		func main() {
				http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
						fmt.Fprintf(w, "Nilai URL Path: %s\n", r.URL.Path)
						fmt.Fprintf(w, "Hi James Bond, selamat datang di GCP\n")
				})

				http.ListenAndServe(":8080", nil)
		}

06. Build main.go

	$ cd simple
	$ go build main.go

07. Run Executable

	$ cd simple
	$ ./main

08. Test

	Cara 1:
	 - Buka terminal 2
	 
	 $ curl localhost:8080/JamesBondSecretAgent	
		Nilai URL Path: /JamesBondSecretAgent	
		Hi James Bond, selamat datang di GCP
			
	Cara 2:
	 - Buka Web Browser
	 - http://<EXTERNAL IP>:8080/JamesBondSecretAgent		

=== Delete VM Instance ===

01. Open Project
	- https://console.cloud.google.com/
	
02. Startup VM
	Search : VM Instance 

=== Create Kubernetes Cluster ===

01. Search : Kubernetes Cluster

02. Enable Kubernetes Engine API

03. Create Kubernetes Cluster
	- Standar Mode
	- name 		: gkecluster
	  region 	: asia-southease1
	  Static Version
	- Number of nodes : 3
	  Enable cluster autoscaler :
	    min : 1
		max : 3
		
04. Check 3 buah VM Instance yg terbentuk karena kita create 3 node

05. Activate Cloud Shell

	$ gcloud container clusters list
		ERROR: (gcloud.container.clusters.list) You do not currently have an active account selected.
		Please run:

		  $ gcloud auth login

		to obtain new credentials.

		If you have already logged in with a different account:

			$ gcloud config set account ACCOUNT

		to select an already authenticated account to use.

	$ gcloud auth login
	$ gcloud container clusters list
		NAME: gkecluster
		LOCATION: asia-southeast2-b
		MASTER_VERSION: 1.22.12-gke.2300
		MASTER_IP: 34.101.174.233
		MACHINE_TYPE: e2-medium
		NODE_VERSION: 1.22.12-gke.2300
		NUM_NODES: 3
		STATUS: RUNNING
		
	$ gcloud container clusters get-credentials gkecluster --zone asia-southeast2-b
		Fetching cluster endpoint and auth data.
		kubeconfig entry generated for gkecluster.		

06. Test Kubernetes

	$ kubectl get deployments
		No resources found in default namespace.
		
	$ kubectl get pods
		No resources found in default namespace.
		
=== Dockerize a node.js (Hello Word) Application ===

01. Create directory dan inisialisasi npm
	
	$ mkdir helloworld
	$ cd helloworld
	$ npm init	
		- jawab dg nilai default
	$ ls
	$ more package.json

		{
		  "name": "helloworld",
		  "version": "1.0.0",
		  "description": "",
		  "main": "index.js",
		  "scripts": {
			"test": "echo \"Error: no test specified\" && exit 1"
		  },
		  "author": "Hari Budisantoso",
		  "license": "ISC"
		}
	
02. Install Express Framework

	$ npm install express --save
	$ more package.json
		{
		  "name": "helloworld",
		  "version": "1.0.0",
		  "description": "",
		  "main": "index.js",
		  "scripts": {
			"test": "echo \"Error: no test specified\" && exit 1"
		  },
		  "author": "Hari Budisantoso",
		  "license": "ISC",
		  "dependencies": {
			"express": "^4.18.2"
		  }
		}

03. Edit package.json

	$ cd helloworld
	$ nano package.json
	
		{
		  "name": "helloworld",
		  "version": "1.0.0",
		  "description": "",
		  "main": "index.js",
		  "scripts": {
			"test": "echo \"Error: no test specified\" && exit 1"
		  },
		  "author": "Hari Budisantoso",
		  "license": "ISC",
		  "scripts": {
			"start": "node index.js"
		  },		  
		  "dependencies": {
			"express": "^4.18.2"
		  }
		}	
		
04. Buat index.js

	$ cd helloworld
	$ nano index.js
	
		'use strict';

		const express = require('express');

		const app = express();

		app.get('/', (req, res) => {
		  res.status(200).send('Hello, world!').end();
		});

		const PORT = parseInt(process.env.PORT) || 8080;
		app.listen(PORT, () => {
		  console.log(`App listening on port ${PORT}`);
		  console.log('Press Ctrl+C to quit.');
		});

		module.exports = app;	

05. Create Dockerfile

	$ cd helloworld
	$ nano Dockerfile

	FROM node:7
	WORKDIR /app
	COPY package.json /app
	RUN npm install
	COPY . /app
	CMD node index.js
	EXPOSE 8081

06. Build Docker Image

	$ docker image ls
		REPOSITORY   TAG       IMAGE ID   CREATED   SIZE
	
	$ cd helloworld
	$ docker build -t hello-world .

		...
		Removing intermediate container fded1921b437
		 ---> 0ffdd891171b
		Successfully built 0ffdd891171b
		Successfully tagged hello-world:latest

	$ docker image ls
		REPOSITORY    TAG       IMAGE ID       CREATED          SIZE
		hello-world   latest    0ffdd891171b   52 seconds ago   669MB
		node          7         d9aed20b68a4   5 years ago      660MB







